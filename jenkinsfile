pipeline {
    agent any

    environment {
        TERRAFORM_DIR = 'LabCharles'
        ANSIBLE_DIR = 'ansible'
        ORACLE_PLAYBOOK = 'playbooks/oracle_db_setup.yaml'
    }

    stages {
        stage('Checkout') {
            steps {
                git credentialsId: '0c595440-42f7-4141-8b3a-256edfe455c8', url: 'https://github.com/charlesajah/terraform.git'
            }
        }

        stage('Terraform Init') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    withCredentials([string(credentialsId: 'TF_API_TOKEN', variable: 'HCP_TOKEN')]) {
                        sh '''
                        export TF_TOKEN_app_terraform_io="$HCP_TOKEN"
                        echo "Public IP for Jenkin terminal is:  $( curl -s ifconfig.me)"                      
                        terraform init
                        '''
                    }
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    withCredentials([string(credentialsId: 'TF_API_TOKEN', variable: 'HCP_TOKEN')]) {
                        sh '''
                        export TF_TOKEN_app_terraform_io="$HCP_TOKEN"
                        terraform plan -out tfplan.json
                        '''
                    }
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    withCredentials([string(credentialsId: 'TF_API_TOKEN', variable: 'HCP_TOKEN')]) {
                        sh '''
                        export TF_TOKEN_app_terraform_io="$HCP_TOKEN"
                        terraform apply -auto-approve
                        '''
                    }
                }
            }
        }
        
        stage('Generate Ansible Inventory') {
            steps {
                script {
                    dir("${TERRAFORM_DIR}") {
                        withCredentials([string(credentialsId: 'TF_API_TOKEN', variable: 'HCP_TOKEN')]) {
                            sh '''
                            export TF_TOKEN_app_terraform_io="$HCP_TOKEN"

                            PUBLIC_IP_VM1=$(terraform output -raw vm1_public_ip)
                            PUBLIC_IP_VM2=$(terraform output -raw vm2_public_ip)

                            echo "-----------------------------------"
                            echo "VM 1 Public IP: $PUBLIC_IP_VM1"
                            echo "VM 2 Public IP: $PUBLIC_IP_VM2"
                            echo "-----------------------------------"

                            mkdir -p ../${ANSIBLE_DIR}
                            cat > ../${ANSIBLE_DIR}/inventory.ini <<EOF
[oracle_servers]
vm1 ansible_host=$PUBLIC_IP_VM1
vm2 ansible_host=$PUBLIC_IP_VM2

[all:vars]
ansible_user=azureuser # THIS IS THE CRITICAL PART FOR USERNAME
ansible_python_interpreter=/usr/bin/python3
EOF
                            echo "Ansible inventory.ini created successfully."
                            cat ../${ANSIBLE_DIR}/inventory.ini
                            '''
                        }
                    }
                }
            }
        }

        stage('Run Ansible Playbook') {
            steps {
                dir("${ANSIBLE_DIR}") { // Change into the ansible directory
                    // Configure Jenkins to use the SSH key credential
                    withCredentials([sshUserPrivateKey(credentialsId: 'VM_SSH_KEY', keyFileVariable: 'ANSIBLE_SSH_KEY')]) {
                        sh """
                        # Set correct permissions for the private key file created by Jenkins
                        chmod 600 $ANSIBLE_SSH_KEY

                        # Run Ansible playbook using the injected private key
                        #you can temporarily disable strict host key checking in Ansible for testing purposes
                        ansible-playbook -i inventory.ini ${ORACLE_PLAYBOOK} --private-key $ANSIBLE_SSH_KEY --ssh-extra-args='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
                        """
                    }
                }
            }
        }
    }
}